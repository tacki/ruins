<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MainEntitiesBattleProxy extends \Main\Entities\Battle implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function isActive()
    {
        $this->__load();
        return parent::isActive();
    }

    public function isMember(\Main\Entities\Character $character)
    {
        $this->__load();
        return parent::isMember($character);
    }

    public function getMember(\Main\Entities\Character $character)
    {
        $this->__load();
        return parent::getMember($character);
    }

    public function getAllMembers()
    {
        $this->__load();
        return parent::getAllMembers();
    }

    public function getAllAttackers()
    {
        $this->__load();
        return parent::getAllAttackers();
    }

    public function getAllDefenders()
    {
        $this->__load();
        return parent::getAllDefenders();
    }

    public function getAllActiveMembers()
    {
        $this->__load();
        return parent::getAllActiveMembers();
    }

    public function getMembersAtSide($side, $status = false)
    {
        $this->__load();
        return parent::getMembersAtSide($side, $status);
    }

    public function addMember(\Main\Entities\Character $character, $side)
    {
        $this->__load();
        return parent::addMember($character, $side);
    }

    public function removeMember(\Main\Entities\Character $character)
    {
        $this->__load();
        return parent::removeMember($character);
    }

    public function setMemberStatus(\Main\Entities\Character $character, $status)
    {
        $this->__load();
        return parent::setMemberStatus($character, $status);
    }

    public function setMemberSide(\Main\Entities\Character $character, $side)
    {
        $this->__load();
        return parent::setMemberSide($character, $side);
    }

    public function getTokenOwner()
    {
        $this->__load();
        return parent::getTokenOwner();
    }

    public function setTokenOwner(\Main\Entities\Character $character)
    {
        $this->__load();
        return parent::setTokenOwner($character);
    }

    public function addMessage($message)
    {
        $this->__load();
        return parent::addMessage($message);
    }

    public function getAllMessages()
    {
        $this->__load();
        return parent::getAllMessages();
    }

    public function clearMessages()
    {
        $this->__load();
        return parent::clearMessages();
    }

    public function getActionDoneList()
    {
        $this->__load();
        return parent::getActionDoneList();
    }

    public function getActionNeededList()
    {
        $this->__load();
        return parent::getActionNeededList();
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'initiator', 'actions', 'members', 'messages', 'timer', 'round', 'active', 'battlemembersnapshot');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}